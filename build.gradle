plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url = "https://maven.quiltmc.org/repository/release" } // QM
    maven { url = "https://maven.parchmentmc.org" } // Parchment
    maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
    maven { url = "https://mvn.devos.one/snapshots/" } // Registrate, Forge Tags, Milk Lib
    maven { url = "https://mvn.devos.one/releases/" } // Porting Lib
    maven { // for Porting Lib: Mixin Extras, Fabric ASM
        url = "https://jitpack.io/"
        content { includeGroupAndSubgroups("com.github") }
    }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
    maven { url = "https://maven.tterrag.com/" } // Flywheel
    maven { url = "https://maven.shedaniel.me/" } // REI and deps
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Sodium, Sandwichable
    maven { url = "https://maven.terraformersmc.com/" } // Mod Menu, Trinkets
    maven { url = "https://squiddev.cc/maven" } // CC:T
    maven { url = "https://modmaven.dev" } // Botania
    maven { url = "https://maven.ladysnake.org/releases" } // CCA, for Trinkets
    maven {
        url = 'https://maven.blamejared.com'
        name = 'BlameJared Maven'
    }
    maven { // Reach Entity Attributes
        url = "https://maven.jamieswhiteshirt.com/libs-release"
        content { includeGroup("com.jamieswhiteshirt") }
    }
    maven {
        url = "https://www.cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven {
        url = "https://maven.architectury.dev"  // Shedaniel's maven (Architectury API)
        content { includeGroup "dev.architectury" }
    }
    maven {
        url = "https://maven.saps.dev/releases"  // saps.dev Maven (KubeJS and Rhino)
        content { includeGroup "dev.latvian.mods" }
    }
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
            exclude("src/generated/resources/.cache")
        }
    }
}

loom {
    if(file("src/main/resources/${mod_id}.accesswidener").exists()){
        accessWidenerPath.set(file("src/main/resources/${mod_id}.accesswidener"))
    }
    runs {
        configureEach {
            vmArg "-XX:+AllowEnhancedClassRedefinition"
            vmArg "-XX:+IgnoreUnrecognizedVMOptions"
        }

        client {
            runDir "run/client"
        }

        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            // from ae2
            property "porting_lib.datagen.existing_resources", file("src/main/resources").absolutePath

            runDir "run/datagen"
        }

        server {
            runDir "run/server"
        }

        gametestServer {
            server()
            name "Headlesss GameTests"
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "run/gametest"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:$loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"

    //modImplementation "io.github.moremcmeta:moremcmeta-fabric:${project.moremcmeta_version}"
    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:$config_version"

    for (String module in port_lib_modules.split(",")) {
        modImplementation(include("io.github.fabricators_of_create.Porting-Lib:$module:$port_lib_version+$minecraft_version"))
    }
    modImplementation(include("com.github.Chocohead:Fabric-ASM:v2.3"))


    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version"){
        exclude(group: "net.fabricmc.fabric-api")
    }
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modCompileOnly("com.blamejared.crafttweaker:CraftTweaker-fabric-$minecraft_version:$crafttweaker_version")
    modCompileOnly("curse.maven:jade-324717:$jade_id")
    modCompileOnly("dev.latvian.mods:kubejs-fabric:$kubejs_version")

    modCompileOnly "mezz.jei:jei-$minecraft_version-common-api:$jei_version"
    modCompileOnly "mezz.jei:jei-$minecraft_version-fabric-api:$jei_version"

    compileOnly("org.projectlombok:lombok:1.18.24")
    annotationProcessor("org.projectlombok:lombok:1.18.24")

}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
    }
}
