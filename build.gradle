plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url = "https://maven.quiltmc.org/repository/release" } // QM
    maven { url = "https://maven.parchmentmc.org" } // Parchment
    maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
    maven { url = "https://mvn.devos.one/snapshots/" } // Registrate, Forge Tags, Milk Lib
    maven { url = "https://mvn.devos.one/releases/" } // Porting Lib
    maven { // for Porting Lib: Mixin Extras, Fabric ASM
        url = "https://jitpack.io/"
        content { includeGroupAndSubgroups("com.github") }
    }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
    maven { url = "https://maven.tterrag.com/" } // Flywheel
    maven { url = "https://maven.shedaniel.me/" } // REI and deps
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Sodium, Sandwichable
    maven { url = "https://maven.terraformersmc.com/" } // Mod Menu, Trinkets
    maven { url = "https://squiddev.cc/maven" } // CC:T
    maven { url = "https://modmaven.dev" } // Botania
    maven { // Reach Entity Attributes
        url = "https://maven.jamieswhiteshirt.com/libs-release"
        content { includeGroup("com.jamieswhiteshirt") }
    }
    maven { url = "https://maven.ladysnake.org/releases" } // CCA, for Trinkets
}

loom {
    if(file("src/main/resources/avaritia.accesswidener").exists()){
        accessWidenerPath.set(file("src/main/resources/avaritia.accesswidener"))
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    //modImplementation "io.github.moremcmeta:moremcmeta-fabric:${project.moremcmeta_version}"


    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_version}"
    modImplementation "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:transfer:2.3.4+1.20.1"))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:base:2.3.4+1.20.1"))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:attributes:2.3.4+1.20.1"))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:asm:2.3.4+1.20.1"))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:data:2.3.4+1.20.1"))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:tool_actions:2.3.4+1.20.1"))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:tags:2.3.4+1.20.1"))
    modImplementation(include("com.github.Chocohead:Fabric-ASM:v2.3"))


    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${project.config_version}"
    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    compileOnly("org.projectlombok:lombok:1.18.24")
    annotationProcessor("org.projectlombok:lombok:1.18.24")

}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
